{"ast":null,"code":"let accessToken;\nlet clientId = \"ca0dd58e11c24dc3992c3d18f36430aa\";\nlet redirectUri = \"http://localhost:3000/\";\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    //If the access token is not already set, check the URL to see if it has just been obtained.\n    //check for access token to match\n    let accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    ///access_token=([^&]*)/ regular expression for capturing all the characters assigned to the access token\n    let expireInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    ////expires_in=([^&]*)/ regular expression for capturing all the characters assigned to the expires\n\n    if (accessTokenMatch && expireInMatch) {\n      //Set the access token value\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expireInMatch[1]);\n\n      //Clear the parameters from the URL, so the app doesn’t try grabbing the access token after it has expired\n      window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      } else {\n        return jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      }\n    });\n  },\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n    const accessToken = Spotify.getAccessToken();\n    //a header, which allows the client to pass along information about the request\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n\n    // a request that returns the user’s Spotify username\n    return fetch(\"https://api.spotify.com/v1/me\", {\n      headers: headers\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      userId = jsonResponse.id;\n\n      //a post request inside a promise\n      let url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n      return fetch(url, {\n        method: \"POST\",\n        body: JSON.stringify({\n          name: name\n        }),\n        headers: headers\n      });\n    }).then(response => {\n      response.json();\n    }).then(jsonResponse => {\n      console.log(jsonResponse);\n      let playlistID = jsonResponse.id;\n\n      //a POST request that creates a new playlist in the user’s account and returns a playlist ID\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistID}/tracks`, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n          uris: trackUris\n        })\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["accessToken","clientId","redirectUri","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expireInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","url","method","body","JSON","stringify","console","log","playlistID","uris"],"sources":["/Users/antonio/Documents/GitHub/jammingProject/src/util/Spotify.js"],"sourcesContent":["let accessToken;\nlet clientId = \"ca0dd58e11c24dc3992c3d18f36430aa\";\nlet redirectUri = \"http://localhost:3000/\";\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    //If the access token is not already set, check the URL to see if it has just been obtained.\n    //check for access token to match\n    let accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    ///access_token=([^&]*)/ regular expression for capturing all the characters assigned to the access token\n    let expireInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    ////expires_in=([^&]*)/ regular expression for capturing all the characters assigned to the expires\n\n    if (accessTokenMatch && expireInMatch) {\n      //Set the access token value\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expireInMatch[1]);\n\n      //Clear the parameters from the URL, so the app doesn’t try grabbing the access token after it has expired\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: { Authorization: `Bearer ${accessToken}` },\n    })\n      .then((response) => {\n       return response.json();\n      })\n      .then((jsonResponse) => {\n        if (!jsonResponse.tracks) {\n          return [];\n        } else {\n          return jsonResponse.tracks.items.map((track) => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri,\n          }));\n        }\n      });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n    const accessToken = Spotify.getAccessToken();\n    //a header, which allows the client to pass along information about the request\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    // a request that returns the user’s Spotify username\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\n      .then((response) => {\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        userId = jsonResponse.id;\n\n        //a post request inside a promise\n        let url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n        return fetch(url, {\n          method: \"POST\",\n          body: JSON.stringify({ name: name }),\n          headers: headers \n        });\n      })\n      .then(\n        response => {\n            response.json();\n        }\n      )\n      .then(\n        jsonResponse =>{\n          console.log(jsonResponse);\n            let playlistID = jsonResponse.id;\n\n            //a POST request that creates a new playlist in the user’s account and returns a playlist ID\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistID}/tracks`,{\n                method: 'POST',\n                headers: headers,\n                body: JSON.stringify({ uris: trackUris })\n            })\n        }\n      )\n  },\n};\n\nexport default Spotify;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}